@using Newtonsoft.Json;
@using System.Collections.Generic;
@using System.Globalization;
@using System.Web
@using KinoPrototype
@inject IJSRuntime JSRuntime
@using KinoPrototype.Domain
@using Microsoft.AspNetCore.Authorization
@page "/JoinCreate/{filterString}"
@attribute [Authorize]  

<style>
/* Base container for each movie */
.Redbox {
    display: flex;
    align-items: flex-start; /* Align the start of the items */
    margin-bottom: 20px;
}

/* Styling for the poster image */
.PosterImage {
    margin-right: 20px;
}

/* Container for movie details */
.MovieDetails {
    flex-grow: 1; /* Allow the movie details to fill the remaining space */
}

/* Header for each movie */
.MovieHeader h2 {
    margin-top: 0; /* Remove top margin for the movie title */
    margin-bottom: 0.5em; /* Add a little space below the title */
}

.MovieHeader p {
    margin-top: 0; /* Remove top margin for other details */
    margin-bottom: 0.5em; /* Consistent space below each detail */
}

/* Styling for cinema location */
.CinemaLocation {
    margin-top: 1em; /* Add space above the cinema location */
    margin-bottom: 0.5em; /* Add space below the cinema location */
}

/* Styling for versions and showtimes */
.Version {
    margin-bottom: 1em; /* Add space below each version */
}


/* Hide the default checkbox input */
.Showtimes input[type="checkbox"] {
    display: none;
}

/* Style when checkbox is checked */
.Showtimes input[type="checkbox"]:checked + .showtime-label {
    background-color: #66bb6a;
}

/* Style when checkbox is not checked */
.Showtimes input[type="checkbox"]:not(:checked) + .showtime-label {
    background-color: #eee;
}

/* Style for checked checkbox text */
.Showtimes input[type="checkbox"]:checked + .showtime-label .showtime-time {
    color: white;
}

/* Style for unchecked checkbox text */
.Showtimes input[type="checkbox"]:not(:checked) + .showtime-label .showtime-time {
    color: black;
}


/* Base styles for the showtime labels */
.Showtimes .showtime-label {

    display: block; /* or inline-block, depending on how you want to handle the layout */
    padding: 4px; /* Adjust padding as necessary */
    margin-bottom: 4px;
    
    flex-direction: column;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    user-select: none;
    background-color: #eee;
    border-radius: 4px;
    box-shadow: inset 0 0 5px rgba(0,0,0,0.2);
    white-space: nowrap; /* Keep text in a single line */
    width: 100px;
}

/* Style for the sal name */
.Showtimes .showtime-sal {
    font-size: 14px; /* Smaller font size for sal name */
    margin-bottom: 2px; /* Space between sal name and playtime */
    overflow: hidden; /* Ensures the content does not expand the container */
    text-overflow: ellipsis; /* Adds an ellipsis when the text overflows */
    white-space: nowrap; /* Prevents the text from wrapping to the next line */
   
}

/* Style for the playtime */
.Showtimes .showtime-time {
    font-weight: bold;
    font-size: 24px; /* Larger font size for playtime */
}

.Showtimes .table-container {
    overflow-x: auto; /* Adds horizontal scrollbar if the table exceeds the container width */

}

.Showtimes table {
    border-collapse: collapse; /* Collapse borders for a clean look */
}

/* Style for the table headers and cells to have a fixed width */
.Showtimes th,
.Showtimes td {
    width: 10px; /* Fixed width */
    text-align: left; /* Align text to the left */
    padding: 8px; /* Add some padding */
    white-space: nowrap; /* Keep the content in a single line */
    overflow: hidden; /* Hide overflow */
    text-overflow: ellipsis; /* Add an ellipsis to clipped text */
    border-bottom: 1px solid #ddd; /* Add a bottom border for separation */
    vertical-align: top; /* Align the content to the top of the cell */
}

.Showtimes td {
    padding: 8px; /* Add some padding */
}


.movie-info {
    background-color: #E0E0E0; /* Light gray background */
    padding: 5px;
    border-radius: 5px; /* Optional: rounds the corners of the background */
    display: inline-flex; /* Places children next to each other */
    align-items: center; /* Aligns children vertically in the center */
    justify-content: center; /* Centers children horizontally */
    gap: 10px; /* Creates space between the children */
}

.movie-info .premiere,
.movie-info .duration {
    color: #333; /* Dark gray text color for better contrast */
    font-size: 14px; /* Adjust font size as needed */
}


.snackbar {
    position: fixed;
    bottom: 10px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #333;
    color: #fff;
    padding: 10px;
    border-radius: 5px;
    opacity: 0;
    transition: opacity 0.3s;
    background-color: red;
    
}

.snackbar.show {
    opacity: 1;
}

</style>


@if (showtimes.Count > 0 && movies.Count > 0 && cinemas.Count > 0)
{
    <h1>Join Event</h1>
    
    <input style="margin-bottom: 5px; width: 300px" type="text" placeholder="Titel" @bind-value="_eventTitle" />
    <br />
    <textarea style="margin-bottom: 5px;width: 300px" type="text"   placeholder="Beskrivelse"  @bind="_eventDescription"></textarea>
    <br />
    <p style="margin-bottom: 0px" >Deadline</p>
    <input style="margin-bottom: 5px; margin-top: 0px;width: 300px" type="date" placeholder="Deadline" @bind="@_deadline" />
    <br />
    <button style="margin-bottom: 5px;width: 200px;height: 50px;bottom: 3rem; right: 3rem; position: fixed; z-index: 999" @onclick="OpenDialog">Opret Event</button>
    <br />
    
    <dialog id="eventDialog">
        @if (!eventCreated)
        {
            <h4>Ønsker du at oprette eventet?</h4>
            <button style="background-color: green; color: white" @onclick="finishJoinEvent">Opret</button>
            <button style="background-color: red; color: white" @onclick="CloseDialog">Rediger videre</button>

        }
        else
        {
            <h4>Event oprettet</h4>
            
            <p>Send dette link til dine venner</p>
            <a href="https://localhost:7123/filling/@_joinEventId" >https://localhost:7123/filling/@_joinEventId</a>
            <button @onclick="CopyLink"> Kopier</button>
        }
          
        
    </dialog>
    
    <div class="snackbar @(_showSnackbar ? "show" : "")">
        @_snackbarMessage
    </div>
    
    <h2 style="margin-top: 10px" >Vælg muglige forestillinger</h2>
    
    

    @foreach (var movie in showtimes.GroupBy(s => s.Movie))
    {
        <div class="Redbox">
            <div class="PosterImage">
                <img src="@movie.Key.ImageUrl" alt="Movie Poster" width="200" height="300"/>
            </div>
            <div class="MovieDetails">
                <div class="MovieHeader">
                    <h2>@movie.Key.Navn</h2>

                    <div class="movie-info">
                        <span class="premiere">Premiere @movie.Key.PremiereDate | </span>
                        <span class="duration">Varighed @movie.Key.Duration min</span>
                    </div>

                </div>
                @foreach (var cinema in movie.GroupBy(s => s.Cinema))
                {
                    <div class="CinemaLocation">
                        <h4>@cinema.Key.Navn</h4>
                    </div>
                    @foreach (var version in cinema.GroupBy(s => s.VersionTag))
                    {
                        <!-- Assuming version is your grouped data object for a particular movie version -->
                        <div class="Version">
                            <strong>@version.Key.Type</strong>
                            <div class="Showtimes">
                                <div class="table-container">
                                    <table>
                                        <tr>
                                            <!-- Create table headers for each grouped date -->
                                            @foreach (var date in version.GroupBy(s => s.Playtime.StartTime.ToString("dd/MM")))
                                            {
                                                <th>@date.Key</th>
                                            }
                                        </tr>
                                        <tr>
                                            <!-- Create table data for each showtime within the grouped date -->
                                            @foreach (var date in version.GroupBy(s => s.Playtime.StartTime.ToString("dd/MM")))
                                            {
                                                <td>
                                                    @foreach (var showtime in date)
                                                    {
                                                        var checkboxId = "showtime_" + showtime.Id;
                                                        var showtimeId = showtime.Id;
                                                        var isChecked = selectedShowtimeIds.Contains(showtimeId);

                                                        <div>
                                                            <input type="checkbox" id="@checkboxId" name="showtime" value="@showtime.Playtime.StartTime" checked="@isChecked" @onclick="() => ToggleCheckedShowtime(showtimeId)">
                                                            <label for="@checkboxId" class="showtime-label">
                                                                <div class="showtime-sal">@showtime.Sal.Navn</div>
                                                                <div class="showtime-time">@showtime.Playtime.StartTime.ToString("HH:mm")</div>
                                                            </label>
                                                        </div>
                                                    }

                                                </td>
                                            }
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }
}


@code {

    [Parameter] public string filterString { get; set; }
    
    

    string json;
    
    private string _eventTitle;
    private string _eventDescription;
    
    private DateTime _deadline = DateTime.Now.AddDays(30);
    
    private bool eventCreated = false;
    
    private int _joinEventId;
    
    private string _snackbarMessage;
    
    private bool _showSnackbar;
   
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;
    

    List<Cinema> cinemas = new List<Cinema>();
    List<KinoPrototype.Domain.Movie> movies = new();
    List<KinoPrototype.Domain.Showtime> showtimes = new();
    List<Playtime> playtimes = new List<Playtime>();
    List<VersionTag> versionTags = new List<VersionTag>();
    List<Sal> sals = new List<Sal>();


    List<int> selectedShowtimeIds = new List<int>();


    void ToggleCheckedShowtime(int showtimeId)
    {
        if (selectedShowtimeIds.Contains(showtimeId))
        {
            // Showtime is already selected, remove it
            selectedShowtimeIds.Remove(showtimeId);
        }
        else
        {
            // Showtime is not selected, add it
            selectedShowtimeIds.Add(showtimeId);
        }
    }


    //make method to print count of all lists
    void PrintCount()
    {
        Console.WriteLine("STARTING PRINTS");
        Console.WriteLine("Cinemas: " + cinemas.Count);
        Console.WriteLine("Movies: " + movies.Count);
        Console.WriteLine("Showtimes: " + showtimes.Count);
        Console.WriteLine("Playtimes: " + playtimes.Count);
        Console.WriteLine("VersionTags: " + versionTags.Count);
        Console.WriteLine("Sals: " + sals.Count);
    }


    protected override async Task OnInitializedAsync()
    {
        var client = new HttpClient();

        var url = "https://api.kino.dk/ticketflow/showtimes?" + filterString;

        var uri = new Uri(url);
        var queryParams = HttpUtility.ParseQueryString(uri.Query);

        var cinemasFilter = queryParams.GetValues("cinemas")?.Select(int.Parse).ToList() ?? new List<int>();
        var genresfilter = queryParams.GetValues("genres")?.Select(int.Parse).ToList() ?? new List<int>(); //todo make lookup table for genres
        var moviesFilter = queryParams.GetValues("movies")?.Select(int.Parse).ToList() ?? new List<int>();
        var datesFilter = queryParams.GetValues("date")?.ToList() ?? new List<string>();

        string firstMovie = "";
        string firstCinema = "";
        string firstGenre = "";


        if (cinemasFilter.Count >= 1 && moviesFilter.Count >= 1)
        {
            firstMovie = "&movies=" + moviesFilter[0];
            firstCinema = "&cinemas=" + cinemasFilter[0];
            if (genresfilter.Count >= 1)
            {
                firstGenre = "&genres=" + genresfilter[0];
            }

            json = await client.GetStringAsync("https://api.kino.dk/ticketflow/showtimes?sort=most_purchased" +
                                               firstMovie + firstCinema + firstGenre + "?region=content&format=json");
        }
        else if (cinemasFilter.Count >= 1)
        {
            firstCinema = "&cinemas=" + cinemasFilter[0];
            if (genresfilter.Count >= 1)
            {
                firstGenre = "&genres=" + genresfilter[0];
            }

            json = await client.GetStringAsync("https://api.kino.dk/ticketflow/showtimes?sort=most_purchased" +
                                               firstCinema + firstGenre + "?region=content&format=json");
        }
        else if (moviesFilter.Count >= 1)
        {
            firstMovie = "&movies=" + moviesFilter[0];

            if (genresfilter.Count >= 1)
            {
                firstGenre = "&genres=" + genresfilter[0];
            }

            json = await client.GetStringAsync("https://api.kino.dk/ticketflow/showtimes?sort=most_purchased" +
                                               firstMovie + firstGenre + "?region=content&format=json");
        }
        else
        {
            json = await client.GetStringAsync("https://api.kino.dk/ticketflow/showtimes?sort=most_purchased" +
                                               "&cinemas=53" + "?region=content&format=json");
        }

        var CinemaIdAndName = new Dictionary<int, string>();
        var MovieIdAndName = new Dictionary<int, string>();
        var GenrerIdAndName = new Dictionary<int, string>();

        Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(json);


        foreach (var cinemaOption in myDeserializedClass.Content.Content.Facets.Cinemas.Options)
        {
            CinemaIdAndName.Add(cinemaOption.Key, cinemaOption.Value);
        }

        foreach (var movieOptions in myDeserializedClass.Content.Content.Facets.Movies.Options)
        {
            MovieIdAndName.Add(movieOptions.Key, movieOptions.Value);
        }

        foreach (var genrerOptions in myDeserializedClass.Content.Content.Facets.Genres.Options)
        {
            GenrerIdAndName.Add(genrerOptions.Key, genrerOptions.Value);
        }


        foreach (var cinema in myDeserializedClass.Content.Content.Content.Content)
        {
            Console.WriteLine(cinema.Id);
            foreach (var cinemaFilter in cinemasFilter)
            {
                Console.WriteLine(cinemaFilter);
            }

            Console.WriteLine("CINEMA ID: +" + cinema.Id);
            var cinemaObject = new Cinema()
            {
                Id = cinema.Id,
                Navn = CinemaIdAndName[cinema.Id]
            };
            cinemas.Add(cinemaObject);

            foreach (var movie in cinema.Movies)
            {
                if (!MovieIdAndName.ContainsKey(movie.Id))
                {
                    continue;
                }

                KinoPrototype.Domain.Movie movieObject;

                if (!movies.Any(m => m.Navn == MovieIdAndName[movie.Id]))
                {
                    int duration;

                    int.TryParse(movie.Content.FieldPlayingTime, out duration);


                    movieObject = new KinoPrototype.Domain.Movie()
                    {
                        Id = movie.Id,
                        Navn = MovieIdAndName[movie.Id],
                        PremiereDate = movie.Content.FieldPremiere,
                        AgeRating = movie.Content.FieldCensorshipIcon,
                        ImageUrl = movie.Content.FieldPoster.FieldMediaImage.Sources[0].Srcset,
                        Duration = duration,
                        Showtimes = new List<Showtime>()
                    };
                    movies.Add(movieObject);
                }
                else
                {
                    movieObject = movies.First(m => m.Navn == MovieIdAndName[movie.Id]);
                }


                foreach (var versions in movie.Versions)
                {
                    VersionTag versionObject;
                    if (!versionTags.Any(v => v.Type == versions.Label))
                    {
                        versionObject = new VersionTag()
                        {
                            
                            Type = versions.Label
                        };
                        versionTags.Add(versionObject);
                    }
                    else
                    {
                        versionObject = versionTags.First(v => v.Type == versions.Label);
                    }


                    foreach (var showtimeDate in versions.Dates)
                    {
                        foreach (var showtimeItem in showtimeDate.Showtimes)
                        {
                            Sal salObject;
                            if (!sals.Any(s => s.Navn == showtimeItem.Room.Label))
                            {
                                salObject = new Sal()
                                {
                                    Id = showtimeItem.Room.Id,
                                    Navn = showtimeItem.Room.Label
                                };
                                sals.Add(salObject);
                            }
                            else
                            {
                                salObject = sals.First(s => s.Navn == showtimeItem.Room.Label);
                            }

                            Playtime playtimeObject;
                            var dateString = (showtimeDate.Date + " " + showtimeItem.Time);
                            var commaIndex = dateString.IndexOf(',');
                            if (commaIndex > 0)
                            {
                                dateString = dateString.Substring(commaIndex + 2);
                            }

                            var dateTimeFormat = "dd/MM HH:mm";
                            DateTime dateTime;

                            if (DateTime.TryParseExact(dateString, dateTimeFormat, CultureInfo.InvariantCulture, DateTimeStyles.None, out dateTime))
                            {
                                // Successfully parsed the date
                            }
                            else
                            {
                                // Failed to parse the date
                            }

                            if (!playtimes.Any(p => p.StartTime == dateTime))
                            {
                                playtimeObject = new Playtime()
                                {
                                    StartTime = dateTime
                                };
                                playtimes.Add(playtimeObject);
                            }
                            else
                            {
                                playtimeObject = playtimes.First(p => p.StartTime == dateTime);
                            }

                            var showtimeObject = new Showtime()
                            {
                                Id = showtimeItem.Id,
                                Movie = movieObject,
                                Cinema = cinemaObject,
                                VersionTag = versionObject,
                                Sal = salObject,
                                Playtime = playtimeObject
                            };
                            showtimes.Add(showtimeObject);

                            //movieObject.Showtimes.Add(showtimeObject);
                        }
                    }
                }
            }
        }


        PrintCount();
    }

    
    private async Task OpenDialog()
    {
        if (selectedShowtimeIds.Count <2)
        {
            _snackbarMessage = "Vælg mindst to muglige forestillinger";
            _showSnackbar = true;
            await Task.Delay(3000).ContinueWith(_ => _showSnackbar = false);
        }
        else if (string.IsNullOrEmpty(_eventTitle))
        {
            _snackbarMessage = "Eventet skal have en titel";
            _showSnackbar = true;
            await Task.Delay(3000).ContinueWith(_ => _showSnackbar = false);
        }
        else if (string.IsNullOrEmpty(_eventDescription))
        {
            _snackbarMessage = "Eventet skal have en beskrivelse";
            _showSnackbar = true;
            await Task.Delay(3000).ContinueWith(_ => _showSnackbar = false);
        }
        else if (_deadline<DateTime.Now)
        {
            _snackbarMessage = "Deadline skal være i fremtiden";
            _showSnackbar = true;
            await Task.Delay(3000).ContinueWith(_ => _showSnackbar = false);
        } 
        else
        {
            await JSRuntime.InvokeVoidAsync("customFunctions.showDialog", "eventDialog");
        }
    }
    
    private async Task CloseDialog()
    {
        // Hide the dialog using JavaScript interop
       await JSRuntime.InvokeVoidAsync("customFunctions.hideDialog", "eventDialog");
    }
    
    private async Task CopyLink()
    {
        // Hide the dialog using JavaScript interop
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", "https://localhost:7123/filling/"+_joinEventId);
    }
    
    private async Task finishJoinEvent()
    { 
        
        
       HttpClient client = new HttpClient();
       
       var url = "https://localhost:7123/putJoinEvent";

       var pickedShowtimes = selectedShowtimeIds.Select(id => showtimes.First(s => s.Id == id)).ToList();
       
       
     
       
       var authenticationState = await AuthenticationStateTask;
       
       var user = authenticationState.User;
       if (user.Identity is null || !user.Identity.IsAuthenticated) return;
       var authorId = user.Claims
           .FirstOrDefault(c => c.Type == "sub")
           ?.Value!;
       
      
       
       var name =user.Claims.FirstOrDefault(c => c.Type == "nickname")?.Value!;
       
       
       Console.WriteLine("authorId: "+authorId);
       
       var host = new Host()
       {
              AuthId = authorId,
              Username = name,
       };
       
       
       var joinEvent = new JoinEvent()
       {
           Showtimes = pickedShowtimes,
           Host = host,
           Title = _eventTitle,
           Description = _eventDescription,
           Deadline = _deadline,
       };
       
       Console.WriteLine( "before: "+joinEvent.Id);
       
       var response = await client.PutAsJsonAsync(url, joinEvent);
       var id = await response.Content.ReadAsStringAsync();
       
       Console.WriteLine("after: "+id);
       
       //get joinEvent from api
        //var response2 = await client.GetAsync("https://localhost:7123/event/"+id);
        //var returnedJoinEvent = await response2.Content.ReadFromJsonAsync<JoinEvent>();
//
        //foreach (var showtime in returnedJoinEvent .Showtimes)
        //{
        //    Console.WriteLine("movieName: "+showtime.Movie.Navn);
        //}
        
        _joinEventId = int.Parse(id);
        
        eventCreated = true;
    }
    

    public class Root
    {
        [JsonProperty("content")] public ContentLevel1 Content { get; set; }
    }

    public class ContentLevel1
    {
        [JsonProperty("content")] public ContentLevel2 Content { get; set; }
    }

    public class ContentLevel2
    {
        [JsonProperty("content")] public ContentLevel3 Content { get; set; }

        [JsonProperty("facets")] public Facets Facets { get; set; }
    }


    public class ContentLevel3
    {
        [JsonProperty("content")] public List<ContentLevel4> Content { get; set; }
    }

    public class ContentLevel4
    {
        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("id")] public int Id { get; set; }

        [JsonProperty("movies")] public List<MovieJson> Movies { get; set; }
    }

    public class MovieJson
    {
        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("id")] public int Id { get; set; }

        [JsonProperty("versions")] public List<Version> Versions { get; set; }

        [JsonProperty("content")] public MovieContent Content { get; set; }
    }

    public class Version
    {
        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("label")] public string Label { get; set; }

        [JsonProperty("dates")] public List<ShowtimeDate> Dates { get; set; }
    }

    public class ShowtimeDate
    {
        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("date")] public string Date { get; set; }

        [JsonProperty("showtimes")] public List<ShowtimeItem> Showtimes { get; set; }
    }

    public class ShowtimeItem
    {
        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("id")] public int Id { get; set; }

        [JsonProperty("available_seats")] public int AvailableSeats { get; set; }

        [JsonProperty("time")] public string Time { get; set; }

        [JsonProperty("room")] public Room Room { get; set; }
    }

    public class Room
    {
        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("id")] public int Id { get; set; }

        [JsonProperty("label")] public string Label { get; set; }
    }

    public class MovieContent
    {
        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("id")] public string Id { get; set; }

        [JsonProperty("label")] public string Label { get; set; }

        [JsonProperty("field_censorship_icon")]
        public string FieldCensorshipIcon { get; set; }

        [JsonProperty("field_playing_time")] public string FieldPlayingTime { get; set; }

        [JsonProperty("field_poster")] public FieldPoster FieldPoster { get; set; }

        [JsonProperty("field_premiere")] public string FieldPremiere { get; set; }
    }

    public class FieldPoster
    {
        [JsonProperty("type")] public string Type { get; set; }
        [JsonProperty("field_media_image")] public FieldMediaImage FieldMediaImage { get; set; }
    }

    public class FieldMediaImage
    {
        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("responsive_image_style_id")]
        public string ResponsiveImageStyleId { get; set; }

        [JsonProperty("width")] public int Width { get; set; }

        [JsonProperty("height")] public int Height { get; set; }

        [JsonProperty("sources")] public List<SourceItem> Sources { get; set; } // Added this line
    }

    public class SourceItem
    {
        [JsonProperty("srcset")] public string Srcset { get; set; }

        [JsonProperty("media")] public string Media { get; set; }

        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("width")] public int? Width { get; set; } // Nullable because it might not always be present

        [JsonProperty("height")] public int? Height { get; set; }
    }

    public class Cinemas
    {
        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("title")] public string Title { get; set; }

        //ignore this json
        [JsonIgnore]
        [JsonProperty("default_value")]
        public string DefaultValue { get; set; }

        [JsonProperty("options")] public List<CinemaOption> Options { get; set; }
    }

    public class CinemaOption
    {
        [JsonProperty("key")] public int Key { get; set; }

        [JsonProperty("value")] public string Value { get; set; }
    }

    public class Advertisement
    {
    }

    public class Breadcrumbs
    {
    }


    public class Facets
    {
        [JsonProperty("sort")] public object Sort { get; set; } // Replace object with specific type if necessary

        [JsonProperty("city")] public object City { get; set; } // Replace object with specific type if necessary

        [JsonProperty("cinemas")] public Cinemas Cinemas { get; set; }

        [JsonProperty("movies")] public MovieLookup Movies { get; set; } // Replace object with specific type if necessary

        [JsonProperty("versions")] public object Versions { get; set; } // Replace object with specific type if necessary

        [JsonProperty("genres")] public GenresLookup Genres { get; set; } // Replace object with specific type if necessary

        [JsonProperty("date")] public object Date { get; set; } // Replace object with specific type if necessary
    }

    public class GenresLookup
    {
        [JsonProperty("options")] public List<GenrerOptions> Options { get; set; }
    }

    public class GenrerOptions
    {
        [JsonProperty("key")] public int Key { get; set; }

        [JsonProperty("value")] public string Value { get; set; }
    }


    public class MovieLookup
    {
        [JsonProperty("options")] public List<MovieOptions> Options { get; set; }
    }

    public class MovieOptions
    {
        [JsonProperty("key")] public int Key { get; set; }

        [JsonProperty("value")] public string Value { get; set; }
    }

    public class Footer
    {
    }

    public class Header
    {
    }

    public class Initial
    {
    }

    public class Pager
    {
    }


    public class Universe
    {
    }

}
