@page "/filling/{JoinEventId}"
@using Newtonsoft.Json
@using System.Text
@using KinoPrototype.Domain
@using System.Collections.Immutable
@using System.Text.RegularExpressions
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<style>
/* Base container for each movie */
.Redbox {
    display: flex;
    align-items: flex-start; /* Align the start of the items */
    margin-bottom: 20px;
}

/* Styling for the poster image */
.PosterImage {
    margin-right: 20px;
    position: sticky;
    top: 65px;
}

/* Container for movie details */
.MovieDetails {
    flex-grow: 1; /* Allow the movie details to fill the remaining space */
}

/* Header for each movie */
.MovieHeader h2 {
    margin-top: 0; /* Remove top margin for the movie title */
    margin-bottom: 0.5em; /* Add a little space below the title */
}

.MovieHeader p {
    margin-top: 0; /* Remove top margin for other details */
    margin-bottom: 0.5em; /* Consistent space below each detail */
}

/* Styling for cinema location */
.CinemaLocation {
    margin-top: 1em; /* Add space above the cinema location */
    margin-bottom: 0.5em; /* Add space below the cinema location */
}

/* Styling for versions and showtimes */
.Version {
    margin-bottom: 1em; /* Add space below each version */
}


/* Hide the default checkbox input */
.Showtimes input[type="checkbox"] {
    display: none;
}

/* Style when checkbox is checked */
.Showtimes input[type="checkbox"]:checked + .showtime-label {
    background-color: #66bb6a;
}

/* Style when checkbox is not checked */
.Showtimes input[type="checkbox"]:not(:checked) + .showtime-label {
    background-color: #eee;
}

/* Style for checked checkbox text */
.Showtimes input[type="checkbox"]:checked + .showtime-label .showtime-time {
    color: white;
}

/* Style for unchecked checkbox text */
.Showtimes input[type="checkbox"]:not(:checked) + .showtime-label .showtime-time {
    color: black;
}


/* Base styles for the showtime labels */
.Showtimes .showtime-label {

    display: block; /* or inline-block, depending on how you want to handle the layout */
    padding: 4px; /* Adjust padding as necessary */
    margin-bottom: 4px;
    
    flex-direction: column;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    user-select: none;
    background-color: #eee;
    border-radius: 4px;
    box-shadow: inset 0 0 5px rgba(0,0,0,0.2);
    white-space: nowrap; /* Keep text in a single line */
    width: 100px;
}

/* Style for the sal name */
.Showtimes .showtime-sal {
    font-size: 14px; /* Smaller font size for sal name */
    margin-bottom: 2px; /* Space between sal name and playtime */
    overflow: hidden; /* Ensures the content does not expand the container */
    text-overflow: ellipsis; /* Adds an ellipsis when the text overflows */
    white-space: nowrap; /* Prevents the text from wrapping to the next line */
   
}

/* Style for the playtime */
.Showtimes .showtime-time {
    font-weight: bold;
    font-size: 24px; /* Larger font size for playtime */
}

.Showtimes .table-container {
    overflow-x: auto; /* Adds horizontal scrollbar if the table exceeds the container width */

}

.Showtimes table {
    border-collapse: collapse; /* Collapse borders for a clean look */
}

/* Style for the table headers and cells to have a fixed width */
.Showtimes th,
.Showtimes td {
    width: 10px; /* Fixed width */
    text-align: left; /* Align text to the left */
    padding: 8px; /* Add some padding */
    white-space: nowrap; /* Keep the content in a single line */
    overflow: hidden; /* Hide overflow */
    text-overflow: ellipsis; /* Add an ellipsis to clipped text */
    border-bottom: 1px solid #ddd; /* Add a bottom border for separation */
    vertical-align: top; /* Align the content to the top of the cell */
}

.Showtimes td {
    padding: 8px; /* Add some padding */
}


.movie-info {
    background-color: #E0E0E0; /* Light gray background */
    padding: 5px;
    border-radius: 5px; /* Optional: rounds the corners of the background */
    display: inline-flex; /* Places children next to each other */
    align-items: center; /* Aligns children vertically in the center */
    justify-content: center; /* Centers children horizontally */
    gap: 10px; /* Creates space between the children */
}

.movie-info .premiere,
.movie-info .duration {
    color: #333; /* Dark gray text color for better contrast */
    font-size: 14px; /* Adjust font size as needed */
}

.tooltip-container:hover {
    background-color: grey;
}

.tooltip-container:hover .tooltip-content {
    visibility: visible;
}

.tooltip-content {
    visibility: hidden;
    position: absolute;
    z-index: 1;
    transform: translateY(-8rem); /* hard coded for now */
    background-color: lightgray;
}

.empty-showtime {
    width: 100px;
    height: 67px;
    padding: 12px;
    margin-top: 0px;
    margin-bottom: 4px;
    
    border-radius: 4px;
    background-image: repeating-linear-gradient(
        +45deg,
        #ffffff, /* Lighter shade of gray for the streak */
        #ffffff 10px,
        #d5d5d5 10px, /* Darker shade of gray for the space between streaks */
        #d5d5d5 20px
    );
}


</style>

<PageTitle>JoinEvent</PageTitle>


@if (_loading)
{
    <h3>Indlæser...</h3>
    return;
}
@if (_event is null)
{
    <h3>Ingen events fundet</h3>
    <p>Tjek at dit link er korrekt.</p>
    return;
}

<div style="display: flex; flex-direction: row">
    <h1>@_event.Title</h1>
    <button style="margin-left: 5px;height: 40px" @onclick="ScrollToBottom">Gå til resultater</button>
</div>

<p>@_event.Description</p>
<p>Deadline for tilmelding: @_event.Deadline.ToLocalTime().ToString("dd. MMM")</p>
<p>Tidsinterval: @_event.Showtimes.Min(s => s.Playtime.StartTime.ToLocalTime()).ToString("dd. MMM") - @_event.Showtimes.Max(s => s.Playtime.StartTime.ToLocalTime()).ToString("dd. MMM")</p>

@if (_event.Showtimes.Count == 0)
{
    <p>Ingen showtimes fundet</p>
    return;
}
@foreach (var showtimesByMovie in _event.Showtimes.GroupBy(s => s.Movie.Id))
{
    var movie = showtimesByMovie.First().Movie;
    <div class="Redbox">
        <div class="PosterImage">
            <img src="@movie.ImageUrl" alt="Movie Poster" width="200" height="300"/>
        </div>
        <div class="MovieDetails">
            <div class="MovieHeader">
                <h2>@movie.Title</h2>

                <div class="movie-info">
                    <span class="premiere">Premiere @movie.PremiereDate | </span>
                    <span class="duration">Varighed @movie.Duration min</span>
                </div>

            </div>
            @foreach (var showtimesByCinema in showtimesByMovie.GroupBy(s => s.Cinema.Id))
            {
                var cinema = showtimesByCinema.First().Cinema;
                <div class="CinemaLocation">
                    <h2 id="@cinema.Id">@cinema.Name</h2>
                </div>
                @foreach (var showtimesByVersionTag in showtimesByCinema.GroupBy(s => s.VersionTag.Id))
                {
                    var versionTag = showtimesByVersionTag.First().VersionTag;
                    <div class="Version">
                        <strong>@versionTag.Type</strong>
                        <div class="Showtimes">
                            <div class="table-container">
                                <table>
                                    <tr>
                                        @{
                                            // Determine the start and end dates of the interval
                                            var startDate = _event.Showtimes.Min(s => s.Playtime.StartTime.ToLocalTime());
                                            var endDate = _event.Showtimes.Max(s => s.Playtime.StartTime.ToLocalTime());

                                            Console.WriteLine("count1:" + showtimesByVersionTag.Count());
                                            Console.WriteLine("Movie:" + movie.Title);
                                            Console.WriteLine(showtimesByVersionTag.First().Movie.Title);
                                            var count = showtimesByVersionTag.Where(s => s.Movie.Id == showtimesByMovie.Key && s.Cinema.Id == showtimesByCinema.Key && s.VersionTag.Id == showtimesByVersionTag.Key).Count();
                                            Console.WriteLine("count2:" + count);

                                            var latestDateForSpecificCinemaVersion = _event.Showtimes.Where(s => s.Movie.Id == showtimesByMovie.Key && s.Cinema.Id == showtimesByCinema.Key && s.VersionTag.Id == showtimesByVersionTag.Key).Max(s => s.Playtime.StartTime.ToLocalTime().Date);


                                            // Loop through each date in the interval
                                            for (var date = startDate.Date; date <= endDate.Date && date <= latestDateForSpecificCinemaVersion.Date; date = date.AddDays(1))
                                            {
                                                <th>@date.ToString("dd. MMM")</th>
                                            }
                                        }
                                    </tr>
                                    <tr>
                                        <!-- Create table data for each showtime within the grouped date -->
                                        @for (var date = startDate.Date; date <= endDate.Date && date <= latestDateForSpecificCinemaVersion.Date; date = date.AddDays(1))
                                        {
                                            //Check if it exists if not, else
                                            @if (_event.Showtimes.Any(s => s.Movie.Id == showtimesByMovie.Key && s.Cinema.Id == showtimesByCinema.Key && s.VersionTag.Id == showtimesByVersionTag.Key && s.Playtime.StartTime.ToLocalTime().Date == date))
                                            {
                                                <td>
                                                    @foreach (var showtime in _event.Showtimes.Where(s => s.Movie.Id == showtimesByMovie.Key && s.Cinema.Id == showtimesByCinema.Key && s.VersionTag.Id == showtimesByVersionTag.Key && s.Playtime.StartTime.ToLocalTime().Date == date))
                                                    {
                                                        var checkboxId = "showtime_" + showtime.Id;
                                                        var showtimeId = showtime.Id;
                                                        var isChecked = _votedFor.Contains(showtime);

                                                        <div>
                                                            <input type="checkbox" id="@checkboxId" name="showtime" value="@showtime.Playtime.StartTime.ToLocalTime()" checked="@isChecked" @onclick="() => { if (_votedFor.Contains(showtime)) { _votedFor.Remove(showtime); }else { _votedFor.Add(showtime); } }">
                                                            <label for="@checkboxId" class="showtime-label">
                                                                <div class="showtime-sal">@showtime.Room.Name</div>
                                                                <div class="showtime-time">@showtime.Playtime.StartTime.ToLocalTime().ToString("HH:mm")</div>
                                                            </label>
                                                        </div>
                                                    }
                                                </td>
                                            }
                                            else
                                            {
                                                <td>
                                                    <div class="empty-showtime">
                                                    </div>
                                                </td>
                                            }
                                        }
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
}

@if (!_answerSaved)
{
    <div>
        <input placeholder="Indtast dit navn" @bind="@Nickname"/>
        <input placeholder="Skriv din email" type="email" @bind="@Email"/>
        <button onclick="@(async () => { _infoMessage = ""; if (Nickname is null or "") { _infoMessage = "Indtast venligst et navn"; return; } if (!_votedFor.Any()) { _confirmSubmit = true; return; } if (Email is not null or "") { Console.WriteLine("Email is not null or empty"); var emailRegex = new Regex("^([\\w\\.\\-]+)@([\\w\\-]+)((\\.(\\w){2,3})+)$"); var emailMatch = emailRegex.Match(Email); if (!emailMatch.Success) { _infoMessage = "Indtast venligst en gyldig email"; return; } if (_event.Participants is not null && _event.Participants.Any(p => p.Email == Email)) { _infoMessage = "Du har allerede svaret"; return; } } var p = new Participant { Nickname = Nickname, Email = Email, VotedFor = _votedFor, JoinEventId = int.Parse(JoinEventId) }; var jsonP = JsonConvert.SerializeObject(p); var httpClient = new HttpClient(); var response = await httpClient.PutAsync($"{baseUrl}participate/{JoinEventId}", new StringContent(jsonP, Encoding.UTF8, "application/json")); if (response.IsSuccessStatusCode) { _infoMessage = "Svar gemt"; _answerSaved = true; _event.Participants.Add(p); StateHasChanged(); }else { _infoMessage = "Noget gik galt. Prøv igen."; } })">
            Send svar
        </button>
        @if (_confirmSubmit)
        {
            <div>
                <p>Du har ikke valgt nogen tider. Vil du indsende dit svar alligevel?</p>
                <div style="display: inline-block">
                    <button onclick="@(async () => { if (Email is not null or "") { Console.WriteLine("Email is not null or empty"); var emailRegex = new Regex("^([\\w\\.\\-]+)@([\\w\\-]+)((\\.(\\w){2,3})+)$"); var emailMatch = emailRegex.Match(Email); if (!emailMatch.Success) { _infoMessage = "Indtast venligst en gyldig email"; return; } if (_event.Participants is not null && _event.Participants.Any(p => p.Email == Email)) { _infoMessage = "Du har allerede svaret"; return; } } _confirmSubmit = false; var p = new Participant { Nickname = Nickname, VotedFor = _votedFor, JoinEventId = int.Parse(JoinEventId) }; var jsonP = JsonConvert.SerializeObject(p); var httpClient = new HttpClient(); var response = await httpClient.PutAsync($"{baseUrl}participate/{JoinEventId}", new StringContent(jsonP, Encoding.UTF8, "application/json")); if (response.IsSuccessStatusCode) { _infoMessage = "Svar gemt"; _answerSaved = true; _event.Participants.Add(p); StateHasChanged(); }else { _infoMessage = "Noget gik galt. Prøv igen."; } })">
                        Ja
                    </button>
                    <button onclick="@(() => { _confirmSubmit = false; })">Nej</button>
                </div>
            </div>
        }
    </div>
}

@if (_infoMessage is not null)
{
    <p>@_infoMessage</p>
}

<!-- other's votes -->
<br/>
<br/>
<h2>Andres svar</h2>
<label>
    Sortér efter:
    <select @bind="_sortedAfter">
        <option value="@VotesString">@VotesString</option>
        <option value="@TimeString">@TimeString</option>
    </select>
</label>

@{
    var orderedShowtimes = _sortedAfter == VotesString
        ? _event.Showtimes.OrderByDescending(s => { return _event.Participants?.Count(p => (p.VotedFor ?? new()).Select(voted => voted.Id).Contains(s.Id)); }).ThenBy(s => s.Playtime.StartTime.ToLocalTime()).ToList()
        : _event.Showtimes.OrderBy(s => s.Playtime.StartTime.ToLocalTime()).ToList();
}
<div style="max-width: 60vw; overflow-x: scroll">
    <table style="border-spacing:0.5rem;">
        <tr>
            <th style="vertical-align: bottom">Navn</th>
            @foreach (var showtime in orderedShowtimes)
            {
                <th style="padding-left:0.5rem; padding-right: 0.5rem">
                    <div class="tooltip-container">
                        <div class="tooltip-content">
                            <p>Bio: @showtime.Cinema.Name</p>
                            <p>Version: @showtime.VersionTag.Type</p>
                            <p>@showtime.Room.Name</p>
                        </div>
                        <div class="result-table-header " style="display:flex;flex-direction: column; justify-content: center;align-items: center; gap: 0.33rem">
                            <p class="film-title">
                                @(showtime.Movie.Title.Length > 20 ? $"{showtime.Movie.Title[..17]}..." : showtime.Movie.Title)
                            </p>
                            <p class="date">
                                @showtime.Playtime.StartTime.ToLocalTime().ToString("dd. MMM")
                            </p>
                            <p class="playtime" style="font-size: 12px">
                                Kl. @showtime.Playtime.StartTime.ToLocalTime().ToString("HH:mm") - @showtime.Playtime.StartTime.ToLocalTime().AddMinutes(showtime.Movie.Duration).ToString("HH:mm")
                            </p>
                            <p class="participants" style="font-size: 10px; font-weight: bold">
                                Stemmer: @_event.Participants?.Count(p => (p.VotedFor ?? new()).Select(s => s.Id).Contains(showtime.Id))
                            </p>
                        </div>
                    </div>
                </th>
            }
        </tr>

        @foreach (var participant in _event.Participants ?? new())
        {
            <tr>
                <td>@participant.Nickname</td>
                @foreach (var showtime in orderedShowtimes)
                {
                    <td>
                        <div style="height:2rem; background: @(participant.VotedFor.Select(s => s.Id).Contains(showtime.Id) ? "green" : "red")">
                        </div>
                    </td>
                }
            </tr>
        }
        <tr>
            <td/>
            @foreach (var showtime in orderedShowtimes)
            {
                <td>
                    <div>
                        <button onclick="@(async () => { await JsRuntime.InvokeVoidAsync("open", $"https://kino.dk/ticketflow/showtimes/{showtime.Id}", "_blank"); })">Bestil billetter</button>
                        <button onclick="@(async () => { _showtimeToCalendar = showtime; await JsRuntime.InvokeVoidAsync("customFunctions.showDialog", "calendar-dialog"); })">Tilføj til kalender</button>
                    </div>
                </td>
            }
        </tr>
    </table>
</div>

<dialog id="calendar-dialog">
    <div style="display: flex">
        <button onclick="@(() => { OpenGoogleCalendar(_showtimeToCalendar); })">Tilføj til kalender</button>
        <button onclick="@(() => { DownloadCalendarFile(_showtimeToCalendar); })">Download til andre kalendre</button>
    </div>
    <button onclick="@(async () => { await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "calendar-dialog"); })" style="border: 2px solid red">Luk</button>
</dialog>

@code {

    [Parameter] public required string JoinEventId { get; set; }

    private JoinEvent? _event;

    private readonly List<Showtime> _votedFor = new();

    private Showtime? _showtimeToCalendar = null;

    private bool _answerSaved = false;

    private string? Nickname { get; set; }
    private string? Email { get; set; }

    private string? _infoMessage;

    private bool _loading = true;

    string baseUrl;

    private bool _confirmSubmit;

    private const string VotesString = "Stemmer";
    private const string TimeString = "Tidspunkt";

    private string _sortedAfter = VotesString;

    protected override async Task OnInitializedAsync()
    {
        baseUrl = NavigationManager.BaseUri;
        _infoMessage = null;
        var httpClient = new HttpClient();
        var response = await httpClient.GetAsync($"{baseUrl}event/{JoinEventId}");
        if (response.IsSuccessStatusCode)
        {
            _event = await response.Content.ReadFromJsonAsync<JoinEvent>();
        }

        _loading = false;
    }

    private async Task ScrollToBottom()
    {
        await JsRuntime.InvokeVoidAsync("customFunctions.scrollToBottom");
    }

    private async Task OpenGoogleCalendar(Showtime showtime)
    {
        var url = "https://calendar.google.com/calendar/u/0/r/eventedit?"
                  + $"text={_event.Title}"
                  + $"&dates={showtime.Playtime.StartTime.ToLocalTime().ToString("yyyyMMddTHHmmss")}/{showtime.Playtime.StartTime.ToLocalTime().AddMinutes(showtime.Movie.Duration).ToString("yyyyMMddTHHmmss")}"
                  + $"&location={showtime.Cinema.Name}"
                  + $"&details={_event.Description} %0AFilm: {showtime.Movie.Title}, {showtime.Room.Name}, {showtime.VersionTag.Type}";

        await JsRuntime.InvokeVoidAsync("open", url, "_blank");
        await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "calendar-dialog");
    }

    private async Task DownloadCalendarFile(Showtime showtimeToCalendar)
    {
        var DateStart = showtimeToCalendar.Playtime.StartTime;
        var DateEnd = showtimeToCalendar.Playtime.StartTime.AddMinutes(showtimeToCalendar.Movie.Duration);
        var Summary = _event.Title;
        var Location = showtimeToCalendar.Cinema.Name;
        var Description = _event.Description + "\n Film: " + showtimeToCalendar.Movie.Title + ", " + showtimeToCalendar.Room.Name + ", " + showtimeToCalendar.VersionTag.Type;

        //create a new stringbuilder instance
        StringBuilder sb = new StringBuilder();

        //start the calendar item
        sb.AppendLine("BEGIN:VCALENDAR");
        sb.AppendLine("VERSION:2.0");
        sb.AppendLine("PRODID:stackoverflow.com");
        sb.AppendLine("CALSCALE:GREGORIAN");
        sb.AppendLine("METHOD:PUBLISH");

        //create a time zone if needed, TZID to be used in the event itself
        sb.AppendLine("BEGIN:VTIMEZONE");
        sb.AppendLine("TZID:Europe/Amsterdam");
        sb.AppendLine("BEGIN:STANDARD");
        sb.AppendLine("TZOFFSETTO:+0100");
        sb.AppendLine("TZOFFSETFROM:+0100");
        sb.AppendLine("END:STANDARD");
        sb.AppendLine("END:VTIMEZONE");

        //add the event
        sb.AppendLine("BEGIN:VEVENT");

        //with time zone specified
        sb.AppendLine("DTSTART;TZID=Europe/Amsterdam:" + DateStart.ToString("yyyyMMddTHHmm00"));
        sb.AppendLine("DTEND;TZID=Europe/Amsterdam:" + DateEnd.ToString("yyyyMMddTHHmm00"));
        //or without
        sb.AppendLine("DTSTART:" + DateStart.ToString("yyyyMMddTHHmm00"));
        sb.AppendLine("DTEND:" + DateEnd.ToString("yyyyMMddTHHmm00"));

        sb.AppendLine("SUMMARY:" + Summary + "");
        sb.AppendLine("LOCATION:" + Location + "");
        sb.AppendLine("DESCRIPTION:" + Description + "");
        sb.AppendLine("PRIORITY:3");
        sb.AppendLine("END:VEVENT");

        //end calendar item
        sb.AppendLine("END:VCALENDAR");

        //create a string from the stringbuilder
        string CalendarItem = sb.ToString();


        var fileName = "event.ics";

        var bytes = Encoding.UTF8.GetBytes(CalendarItem);
        var stream = new MemoryStream(bytes);
        using var streamRef = new DotNetStreamReference(stream: stream);
        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        await JsRuntime.InvokeVoidAsync("customFunctions.hideDialog", "calendar-dialog");


        /*
    //send the calendar item to the browser
    Response.ClearHeaders();
    Response.Clear();
    Response.Buffer = true;
    Response.ContentType = "text/calendar";
    Response.AddHeader("content-length", CalendarItem.Length.ToString());
    Response.AddHeader("content-disposition", "attachment; filename=\"" + FileName + ".ics\"");
    Response.Write(CalendarItem);
    Response.Flush();
    HttpContext.Current.ApplicationInstance.CompleteRequest();
    */
    }

}