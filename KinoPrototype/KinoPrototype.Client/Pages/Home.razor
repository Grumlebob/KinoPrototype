@page "/"
@using KinoPrototype.Domain
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<PageTitle>KinoJoin</PageTitle>

<h2>Test links</h2>
<a href="@baseUriWithoutTrailingSlash/joinCreate/cinemas=53&cinemas=4&sort=most_purchased"> Med cinema filtre</a>
<br/>
<a href="@baseUriWithoutTrailingSlash/joinCreate/movies=76769&movies=35883&sort=most_purchased"> Med movie filtre</a>
<br/>
<a href="@baseUriWithoutTrailingSlash/joinCreate/cinemas=53&cinemas=52&movies=76769&movies=35883&sort=most_purchased"> Med movie og cinema filtre</a>
<br/>
<a href="@baseUriWithoutTrailingSlash/joinCreate/cinemas=53&cinemas=4&cinemas=49&genres=96&movies=76769&movies=35883&movies=76769&sort=most_purchased"> Med alle filtre uden tid</a>
<br/>
<a href="@baseUriWithoutTrailingSlash/joinCreate/cinemas=53&cinemas=4&cinemas=49&genres=96&movies=76769&movies=35883&movies=76769&sort=most_purchased&date=2024-01-16T10:07:00.000Z&date=2024-02-27T10:07:00.000Z"> Med alle filtre med tid</a>
<br/>


<h2>Dine Events</h2>
<style>
    
    .dashboardCardWithButton {
       
       display: inline-block; 
       margin-right: 10px;
       width: 200px; 
    }
    
    .dashboardCard {
        border: 1px solid black; 
        padding: 5px; 
        color: #191c1f;
        background-color: #c9ebf2;
    }
    
    .dashboardCard:hover {
        background-color: #a3d7e0;
        cursor: pointer;
    }
    
    
</style>

@if (joinEvents != null)
{
    foreach (var joinEvent in joinEvents)
    {
        <div class="dashboardCardWithButton">
            <div onclick="@(() => { NavManager.NavigateTo("filling/" + joinEvent.Id); })" class="dashboardCard">
                <h5 style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap; max-width: 290px;">@joinEvent.Title</h5>
                <p style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap; max-width: 290px;">
                    @joinEvent.Description
                </p>
                <p>Deadline: @joinEvent.Deadline.ToString("dd. MMM")</p>
                <p>Besvarelser: @joinEvent.Participants.Count</p>
            </div>
            <button @onclick="() => ShareEvent(joinEvent)">Del</button>
        </div>
    }
}

<!-- Popup notification -->
@if (showCopySuccess)
{
    <div class="popup-notification">
        Copied to clipboard
    </div>
}

@code {

    string baseUriWithoutTrailingSlash = "";

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;
    List<JoinEvent> joinEvents = new List<JoinEvent>();
    private bool showCopySuccess = false;


    private async Task ShareEvent(JoinEvent joinEvent)
    {
        var data = new
        {
            title = joinEvent.Title,
            text = joinEvent.Description,
            url = $"{NavManager.BaseUri}filling/{joinEvent.Id}"
        };

        await JSRuntime.InvokeVoidAsync("navigator.share", data);
    }

    void NavigateToUrl()
    {
        var url = "joinCreate/cinemas=53&cinemas=52&movies=76769&movies=35883&sort=most_purchased";
        NavManager.NavigateTo(url);
    }

    private async Task CopyToClipboard(int eventId)
    {
        var eventUrl = $"{@NavManager.BaseUri}filling/{eventId}";
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", eventUrl);
        // Show the popup
        showCopySuccess = true;
        StateHasChanged(); // Notify Blazor that the state has changed
        // Hide the popup after 3 seconds
        await Task.Delay(3000);
        showCopySuccess = false;
        StateHasChanged(); // Notify Blazor that the state has changed
    }

    protected override async Task OnInitializedAsync()
    {
        var client = new HttpClient();

        baseUriWithoutTrailingSlash = NavManager.BaseUri.TrimEnd('/');

        var authState = await AuthenticationStateTask;
        var user = authState.User;
        var userId = user.FindFirst(c => c.Type == "sub")?.Value;
        if (userId == null)
        {
            userId = "1";
        }


        var url = $"{NavManager.BaseUri}events/" + userId;

        joinEvents = await client.GetFromJsonAsync<List<JoinEvent>>(url);
    }


}