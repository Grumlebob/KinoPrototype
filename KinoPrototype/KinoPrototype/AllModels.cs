using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;

namespace KinoPrototype;

//1 user can have many JoinEvents
public class Host
{
    [Key] public int Id { get; set; }
    public string Username { get; set; }
}

//1 JoinEvent can have many Participants
public class Participant
{
    [Key] public int Id { get; set; }
    public string Nickname { get; set; }
}

//1 JoinEvent hosted by 1 user can have many Showtimes
public class JoinEvent
{
    [Key] public int Id { get; set; } //own key.
    public Host Host { get; set; } //1 user can have many JoinEvents
    public List<Participant> Participants { get; set; } //1 JoinEvent can have many Participants

    public string Title { get; set; } //"min seje fødselsdag"
    public string Description { get; set; } //"vi mødes ved dør 1"
    public DateTime Deadline { get; set; } // "event skal svares på inden 01-01-2021"

    public List<Movie> Movies { get; set; } //i want to invite people to see Shrek or Barbie
    // Timeframe is autogenerated: 01.01.2020 - 01.10.2020  (showtime.Min(e -> e.showtime) - showtime.Max(e -> e.showtime))
    // Location is autogenerated 
}

public class Movie
{
    public int Id { get; set; }
    public string Navn { get; set; }
    public List<Showtime> Showtimes { get; set; }
}

public class Showtime
{
    public int Id { get; set; }
    public int MovieId { get; set; }
    public Movie Movie { get; set; }
    public int CinemaId { get; set; }
    public Cinema Cinema { get; set; }
    public int PlaytimeId { get; set; }
    public Playtime Playtime { get; set; }
    public int VersionId { get; set; }
    public Version Version { get; set; }
    public int SalId { get; set; }
    public Sal Sal { get; set; }
}

public class Playtime
{
    public int Id { get; set; }
    public DateTime StartTime { get; set; }
}

public class Version
{
    public int Id { get; set; }
    public string Type { get; set; }
}

public class Cinema
{
    public int Id { get; set; }
    public string Navn { get; set; }
}

public class Sal
{
    public int Id { get; set; }
    public string Navn { get; set; }
}

public class TheContext : DbContext
{

    public DbSet<Host> Hosts { get; set; }
    public DbSet<Participant> Participants { get; set; }
    public DbSet<JoinEvent> JoinEvents { get; set; }
    
    public DbSet<Movie> Movies { get; set; }
    public DbSet<Showtime> Showtimes { get; set; }
    public DbSet<Playtime> Playtimes { get; set; }
    public DbSet<Version> Versions { get; set; }
    public DbSet<Cinema> Cinemas { get; set; }
    public DbSet<Sal> Sals { get; set; }

    public TheContext(DbContextOptions<TheContext> options) : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // Configure primary keys
        modelBuilder.Entity<Movie>().HasKey(m => m.Id);
        modelBuilder.Entity<Showtime>().HasKey(s => s.Id);
        modelBuilder.Entity<Playtime>().HasKey(p => p.Id);
        modelBuilder.Entity<Version>().HasKey(v => v.Id);
        modelBuilder.Entity<Cinema>().HasKey(c => c.Id);
        modelBuilder.Entity<Sal>().HasKey(s => s.Id);

        // Configure relationships for Movie and Showtime
        modelBuilder.Entity<Movie>()
            .HasMany(m => m.Showtimes)
            .WithOne(s => s.Movie)
            .HasForeignKey(s => s.MovieId);

        // Make showtime key MovieId, CinemaId, ShowtimeId, VersionId, SalId
        modelBuilder.Entity<Showtime>()
            .HasKey(s => new { s.MovieId, s.CinemaId, ShowtimeId = s.PlaytimeId, s.VersionId, s.SalId });
        
        // Call the base method to ensure any configuration from the base class is applied
        base.OnModelCreating(modelBuilder);
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
    }
}